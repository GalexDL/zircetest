!function(){"use strict";async function sleep(milliseconds){return new Promise((resolve=>setTimeout(resolve,milliseconds)))}function errorToString(error){return JSON.stringify(error,Object.getOwnPropertyNames(error),2)}const int32SafeMinValue=-2147483648,int32SafeMaxValue=2147483647;function toSafeInt(value){return Math.max(int32SafeMinValue,Math.min(int32SafeMaxValue,value))}const webglCommonExtensionNames=["EXT_color_buffer_half_float","EXT_float_blend","EXT_texture_compression_bptc","EXT_texture_compression_rgtc","EXT_texture_filter_anisotropic","KHR_parallel_shader_compile","OES_texture_float_linear","WEBGL_compressed_texture_astc","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBKIT_WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_debug_renderer_info","WEBGL_debug_shaders","WEBGL_lose_context","WEBGL_multi_draw"],allWebGLExtensionNames=[...webglCommonExtensionNames,"ANGLE_instanced_arrays","EXT_blend_minmax","EXT_disjoint_timer_query","EXT_frag_depth","EXT_shader_texture_lod","EXT_sRGB","OES_element_index_uint","OES_fbo_render_mipmap","OES_standard_derivatives","OES_texture_float","OES_texture_half_float","OES_texture_half_float_linear","OES_vertex_array_object","WEBGL_color_buffer_float","WEBGL_depth_texture","WEBGL_draw_buffers"].sort(((a,b)=>a.localeCompare(b)));const allWebGL2ExtensionNames=[...webglCommonExtensionNames,"EXT_color_buffer_float","EXT_disjoint_timer_query_webgl2","EXT_texture_norm16","OES_draw_buffers_indexed","OVR_multiview2","EXT_polygon_offset_clamp","WEBGL_blend_equation_advanced_coherent","WEBGL_clip_cull_distance","WEBGL_draw_instanced_base_vertex_base_instance","WEBGL_multi_draw_instanced_base_vertex_base_instance","WEBGL_provoking_vertex","WEBGL_shader_pixel_local_storage"].sort(((a,b)=>a.localeCompare(b)));const webglParameterNames=["MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_VARYING_VECTORS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_UNIFORM_VECTORS"],webglSpecialParameterNames=["MAX_VIEWPORT_WIDTH","MAX_VIEWPORT_HEIGHT","MAX_TEXTURE_MAX_ANISOTROPY_EXT","MAX_COLOR_ATTACHMENTS_WEBGL","MAX_DRAW_BUFFERS_WEBGL"],webgl2ParameterNames=["MAX_3D_TEXTURE_SIZE","MAX_ARRAY_TEXTURE_LAYERS","MAX_CLIENT_WAIT_TIMEOUT_WEBGL","MAX_COLOR_ATTACHMENTS","MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","MAX_COMBINED_UNIFORM_BLOCKS","MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","MAX_DRAW_BUFFERS","MAX_ELEMENT_INDEX","MAX_ELEMENTS_INDICES","MAX_ELEMENTS_VERTICES","MAX_FRAGMENT_INPUT_COMPONENTS","MAX_FRAGMENT_UNIFORM_BLOCKS","MAX_FRAGMENT_UNIFORM_COMPONENTS","MAX_PROGRAM_TEXEL_OFFSET","MAX_SAMPLES","MAX_SERVER_WAIT_TIMEOUT","MAX_TEXTURE_LOD_BIAS","MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","MAX_UNIFORM_BLOCK_SIZE","MAX_UNIFORM_BUFFER_BINDINGS","MAX_VARYING_COMPONENTS","MAX_VERTEX_OUTPUT_COMPONENTS","MAX_VERTEX_UNIFORM_BLOCKS","MAX_VERTEX_UNIFORM_COMPONENTS","MIN_PROGRAM_TEXEL_OFFSET"],webgl2SpecialParameterNames=["MAX_VIEWPORT_WIDTH","MAX_VIEWPORT_HEIGHT","MAX_TEXTURE_MAX_ANISOTROPY_EXT"];const webglShaderNames=["VERTEX_SHADER","FRAGMENT_SHADER"],webglFloatPrecisionNames=["LOW_FLOAT","MEDIUM_FLOAT","HIGH_FLOAT"],webglIntegerPrecisionNames=["LOW_INT","MEDIUM_INT","HIGH_INT"],webgpuFeatureNames=["bgra8unorm-storage","chromium-experimental-dp4a","depth-clamping","depth-clip-control","depth24unorm-stencil8","depth32float-stencil8","float32-filterable","indirect-first-instance","multi-planar-formats","pipeline-statistics-query","rg11b10ufloat-renderable","shader-f16","texture-compression-bc","texture-compression-etc2","texture-compression-astc","timestamp-query","timestamp-query-inside-passes"].sort(((a,b)=>a.localeCompare(b))),webgpuLimitNames=["maxTextureDimension1D","maxTextureDimension2D","maxTextureDimension3D","maxTextureArrayLayers","maxBindGroups","maxBindingsPerBindGroup","maxDynamicUniformBuffersPerPipelineLayout","maxDynamicStorageBuffersPerPipelineLayout","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage","maxStorageBuffersPerShaderStage","maxStorageTexturesPerShaderStage","maxUniformBuffersPerShaderStage","maxFragmentCombinedOutputResources","maxUniformBufferBindingSize","maxStorageBufferBindingSize","minUniformBufferOffsetAlignment","minStorageBufferOffsetAlignment","maxVertexBuffers","maxBufferSize","maxVertexAttributes","maxVertexBufferArrayStride","maxInterStageShaderComponents","maxInterStageShaderVariables","maxColorAttachments","maxColorAttachmentBytesPerSample","maxComputeWorkgroupStorageSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeWorkgroupsPerDimension"].sort(((a,b)=>a.localeCompare(b)));var Web3DAPI;function getWebGLContext(canvas,webglName){const glWithCaveat=canvas.getContext(webglName,{failIfMajorPerformanceCaveat:!0});if(null!==glWithCaveat)return{gl:glWithCaveat,majorPerformanceCaveat:!1};const gl=canvas.getContext(webglName);return{gl:gl,majorPerformanceCaveat:null!==gl||null}}function isOffscreenCanvasWebGL(webglName){if(!("OffscreenCanvas"in window))return!1;return null!==new OffscreenCanvas(1,1).getContext(webglName)}function getWebGLColorspaceSupport(gl){const glx=gl;if("unpackColorSpace"in glx&&"drawingBufferColorSpace"in glx){const colorspaceSupport={unpackColorSpace:{srgb:!1,"display-p3":!1},drawingBufferColorSpace:{srgb:!1,"display-p3":!1}};function setColorSpaceSupport(property,colorspace){glx[property]=colorspace,colorspaceSupport[property][colorspace]=glx[property]===colorspace}return setColorSpaceSupport("unpackColorSpace","srgb"),setColorSpaceSupport("unpackColorSpace","display-p3"),setColorSpaceSupport("drawingBufferColorSpace","srgb"),setColorSpaceSupport("drawingBufferColorSpace","display-p3"),colorspaceSupport}return null}function getWebGLRendererInfo(gl){const debugInfoExtension=gl.getExtension("WEBGL_debug_renderer_info");return null===debugInfoExtension?null:{vendor:gl.getParameter(debugInfoExtension.UNMASKED_VENDOR_WEBGL),renderer:gl.getParameter(debugInfoExtension.UNMASKED_RENDERER_WEBGL)}}function getWebGLExtensions(gl,extensionsList){const extensionsMap={};for(const ext of extensionsList)extensionsMap[ext]=null!==gl.getExtension(ext);return extensionsMap}function getWebGLParameters(gl,parameterNames){const glEnumMap=gl,parameters={};for(const name of parameterNames){if(!(name in gl))continue;const value=gl.getParameter(glEnumMap[name]);if("number"!=typeof value)throw new Error(`Unhandled WebGL parameter: ${name} of type ${typeof value}`);parameters[name]=toSafeInt(gl.getParameter(glEnumMap[name]))}const viewportDims=gl.getParameter(gl.MAX_VIEWPORT_DIMS);parameters.MAX_VIEWPORT_WIDTH=toSafeInt(viewportDims[0]),parameters.MAX_VIEWPORT_HEIGHT=toSafeInt(viewportDims[1]);const anisotropyExtension=gl.getExtension("EXT_texture_filter_anisotropic");null!==anisotropyExtension&&(parameters.MAX_TEXTURE_MAX_ANISOTROPY_EXT=toSafeInt(gl.getParameter(anisotropyExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT)));const drawBufferExtension=gl.getExtension("WEBGL_draw_buffers");return null!==drawBufferExtension&&(parameters.MAX_DRAW_BUFFERS_WEBGL=toSafeInt(gl.getParameter(drawBufferExtension.MAX_DRAW_BUFFERS_WEBGL)),parameters.MAX_COLOR_ATTACHMENTS_WEBGL=toSafeInt(gl.getParameter(drawBufferExtension.MAX_COLOR_ATTACHMENTS_WEBGL))),parameters}function getWebGLShaderPrecision(gl){const glEnumMap=gl,shaderPrecisionMap={};for(const shaderName of webglShaderNames){const typePrecisionMap={};for(const floatPrecisionName of webglFloatPrecisionNames){const format=gl.getShaderPrecisionFormat(glEnumMap[shaderName],glEnumMap[floatPrecisionName]);null!==format&&(typePrecisionMap[floatPrecisionName]={precision:format.precision,rangeMin:format.rangeMin,rangeMax:format.rangeMax})}for(const integerPrecisionName of webglIntegerPrecisionNames){const format=gl.getShaderPrecisionFormat(glEnumMap[shaderName],glEnumMap[integerPrecisionName]);null!==format&&(typePrecisionMap[integerPrecisionName]={rangeMin:format.rangeMax,rangeMax:format.rangeMin})}shaderPrecisionMap[shaderName]=typePrecisionMap}return shaderPrecisionMap}function getWebGPUFeatures(gpuAdapter,featureNames){const features=featureNames.reduce(((acc,feature)=>(acc[feature]=gpuAdapter.features?.has(feature)||!1,acc)),{}),others=gpuAdapter.features?[...gpuAdapter.features].filter((featureName=>!featureNames.includes(featureName))):[];return others.length>0&&(features.other=others.join(",")),features}function getWebGPULimits(gpuAdapter,limitNames){const limitsMap=gpuAdapter.limits,limitValues=limitNames.reduce(((acc,limitName)=>(limitName in limitsMap&&(acc[limitName]=toSafeInt(limitsMap[limitName])),acc)),{}),others=Object.keys(gpuAdapter.limits?.constructor.prototype||{}).filter((limitName=>!limitNames.includes(limitName)));return others.length>0&&(limitValues.other=others.join(",")),limitValues}async function getWebGPUAdapterInfo(gpuAdapter){if(!("requestAdapterInfo"in gpuAdapter))return{};const adapterInfo=await gpuAdapter.requestAdapterInfo();return{vendor:adapterInfo.vendor,device:adapterInfo.device,architecture:adapterInfo.architecture,description:adapterInfo.description}}!function(Web3DAPI){Web3DAPI[Web3DAPI.WebGL=0]="WebGL",Web3DAPI[Web3DAPI.WebGL2=1]="WebGL2",Web3DAPI[Web3DAPI.WebGPU=2]="WebGPU",Web3DAPI[Web3DAPI.WebXR=3]="WebXR"}(Web3DAPI||(Web3DAPI={})),function(){const defaultConfig={host:"https://web3dsurvey.com",samplePercentage:100,delay:2e3};function tryOrDefault(fn,defaultValue){try{return fn()}catch(error){return defaultValue}}async function getOrCaptureError(fn){try{return await fn()}catch(error){return function(error){return{collectionError:errorToString(error)}}(error)}}async function getWebGL(){let webgl;const canvas=document.createElement("canvas"),{gl:gl,majorPerformanceCaveat:majorPerformanceCaveat}=getWebGLContext(canvas,"webgl");return webgl=null!==gl?{supported:!0,majorPerformanceCaveat:majorPerformanceCaveat,OffscreenCanvas:"OffscreenCanvas"in window&&isOffscreenCanvasWebGL("webgl"),extensions:getWebGLExtensions(gl,allWebGLExtensionNames),parameters:getWebGLParameters(gl,[...webglParameterNames,...webglSpecialParameterNames].sort(((a,b)=>a.localeCompare(b)))),rendererInfo:getWebGLRendererInfo(gl),shaderPrecision:getWebGLShaderPrecision(gl),colorSpace:getWebGLColorspaceSupport(gl)}:{supported:!1},canvas.remove(),webgl}async function getWebGL2(){let webgl2;const canvas2=document.createElement("canvas"),{gl:gl,majorPerformanceCaveat:majorPerformanceCaveat}=getWebGLContext(canvas2,"webgl2");return webgl2=null!==gl?{supported:!0,majorPerformanceCaveat:majorPerformanceCaveat,OffscreenCanvas:"OffscreenCanvas"in window&&isOffscreenCanvasWebGL("webgl2"),extensions:getWebGLExtensions(gl,allWebGL2ExtensionNames),parameters:getWebGLParameters(gl,[...webgl2ParameterNames,...webglParameterNames,...webgl2SpecialParameterNames].sort(((a,b)=>a.localeCompare(b)))),rendererInfo:getWebGLRendererInfo(gl),shaderPrecision:getWebGLShaderPrecision(gl),colorSpace:getWebGLColorspaceSupport(gl)}:{supported:!1},canvas2.remove(),webgl2}async function getWebGPU(){const gpu="undefined"!=typeof navigator&&"gpu"in navigator?navigator.gpu:null;if(null===gpu)return{supported:!1};const gpuAdapter=await async function(gpu){return"requestAdapter"in gpu?await gpu.requestAdapter():null}(gpu);return null===gpuAdapter?{supported:!0,adapter:!1}:{supported:!0,adapter:!0,isFallbackAdapter:gpuAdapter.isFallbackAdapter,features:getWebGPUFeatures(gpuAdapter,webgpuFeatureNames),limits:getWebGPULimits(gpuAdapter,webgpuLimitNames),adapterInfo:await getWebGPUAdapterInfo(gpuAdapter)}}async function getWebXR(){return{supported:"xr"in navigator}}async function getDevice(){return{locationOrigin:tryOrDefault((()=>window.location.origin),"error"),parentLocationOrigin:tryOrDefault((()=>null!==window.parent?window.parent.location.origin:null),"error"),hardwareConcurrency:navigator.hardwareConcurrency,deviceMemory:"deviceMemory"in navigator?navigator.deviceMemory:null,screenWidth:window.screen.width,screenHeight:window.screen.height,colorDepth:window.screen.colorDepth,pixelDepth:window.screen.pixelDepth,devicePixelRatio:window.devicePixelRatio,webdriver:"webdriver"in navigator?navigator.webdriver:null,ImageBitmap:"ImageBitmap"in window,OffscreenCanvas:"OffscreenCanvas"in window,WebAssembly:"WebAssembly"in window,Worker:"Worker"in window}}document.addEventListener("DOMContentLoaded",(async()=>{const config="object"==typeof web3DSurveyConfig?{...defaultConfig,...web3DSurveyConfig}:defaultConfig;if(Math.random()>config.samplePercentage/100)return;await sleep(config.delay);const stats={webgl:await getOrCaptureError(getWebGL),webgl2:await getOrCaptureError(getWebGL2),webgpu:await getOrCaptureError(getWebGPU),webxr:await getOrCaptureError(getWebXR),device:await getOrCaptureError(getDevice),version:18},postUrl=`${config.host}/api/stats`;(await fetch(postUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(stats)})).ok||console.error("Failed to send graphics statistics")}))}()}();